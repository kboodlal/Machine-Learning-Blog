[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine Learning Blog",
    "section": "",
    "text": "Outlier Detection Blog\n\n\n\n\n\n\n\nOutlier Detection\n\n\nMachine Learning\n\n\n\n\n\n\n\n\n\n\n\nDec 2, 2023\n\n\nKeaton Boodlal\n\n\n\n\n\n\n  \n\n\n\n\nLinear Regression Blog\n\n\n\n\n\n\n\nLinear Regression\n\n\nMachine Learning\n\n\n\n\n\n\n\n\n\n\n\nNov 29, 2023\n\n\nKeaton Boodlal\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Linear_regression/index.html",
    "href": "posts/Linear_regression/index.html",
    "title": "Linear Regression Blog",
    "section": "",
    "text": "For my project on linear regression, I used data from a game called League of Legends. League of Legends is a team-based game involving 2 teams, 5 players on each team. In this game, players use gold to buy items which increase their strength for the team fights. There are 5 different roles, with over 100 different legends. For this project, I decided to see how a character’s creep score relates to their gold. Since you get gold for each creep score you have, it would make sense that the relationship is linear, however, getting creep score is not the only way for one to get gold in the game, it is just a method to do so.\nI used python as the programming language for this project. Using data from millions of games, I took the average of most characters creep score, filtered out support, a role that generally doesn’t really on creep score for gold, and then plotted it. I then added a linear regression model. Which predicted that Gold = 25.3*Creep Score + 7499.6.\nimport pandas\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nleague_data = pandas.read_csv('League_of_Legends_stats.csv')\nleague_data['Gold'] = league_data['Gold'].map(lambda s: int(s.replace(\",\", \"\")))\nleague_no_support = league_data[league_data['CS'] &gt;= 125]\nleague_no_support = league_no_support.sort_values(by='CS', ascending=True)\nplot = league_no_support.plot.scatter('CS', 'Gold', s=10, figsize=(15, 15))\nlin_reg = LinearRegression()\nlin_reg.fit(league_no_support['CS'].values.reshape(-1, 1), league_no_support['Gold'].values.reshape(-1, 1))\nline = lin_reg.predict(league_no_support['CS'].values.reshape(-1, 1))\nprint(\"Gold =\", lin_reg.coef_[0][0], \"cs +\", lin_reg.intercept_[0])\nplt.xlabel(\"Creep Score\")\nplt.title(\"Relationship between Creep Score and Gold\")\nleague_no_support['Gold Prediction'] = line\nplot.add_line(matplotlib.lines.Line2D(league_no_support['CS'], league_no_support['Gold Prediction']))\nplt.show()\n\nAfter plotting the linear regression, I wanted to know how well the model fit the data. So I made a new data column which took the absolute value of predicted gold subtracted from the creep score. Then dividing it by the creep score to get the percentage that it was off by. Taking the average of these values, I got that the linear regression is off by 443.9 gold or 3.8%. 3.8% is reasonably accurate.\nleague_no_support['diff'] = abs(league_no_support['Gold'] - league_no_support['Gold Prediction'])\nleague_no_support['diff percentage'] = league_no_support['diff'] / league_no_support['Gold'] * 100\nprint(\"Is on average off by\", np.average(league_no_support['diff']), \"gold\")\nprint(\"Is on average off by\", np.average(league_no_support['diff percentage']), \"%\")\nIn conclusion, due to the accuracy of the results, I would like to say that creep score can be related to gold earned in a game linearly. And that this prediction is accurately represents the data with it only being an average of 3.8% off."
  },
  {
    "objectID": "posts/Outlier_Detection/index.html",
    "href": "posts/Outlier_Detection/index.html",
    "title": "Outlier Detection Blog",
    "section": "",
    "text": "For my blog on Outlier Detection, similar to the project on linear regression, I used data League of Legends, but instead of using data from the competitive matchmaking, I used data from the professional tournament that happened in 2022. The outlier I detected was a high difference in average number of deaths over the tournament.\nI used python for this blog. This time, without taking out supports from the data and using average deaths as the delimiter, I made a bar chart which made an almost belle curve.\nimport pandas\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nleague_data = pandas.read_csv('League_Worlds_2022.csv')\nsns.set_theme()\nsns.displot(data=league_data['Avg deaths']).set(title=\"Average Deaths\", xlabel=\"Average Deaths\",ylabel=\"Number of Players\")\nplt.show()\n\nAfter plotting it, I calculated the mean, and standard deviation. Then printed out the values that would be counted as outliers but checking if they are greater than three standard deviations away from the mean and printing those players names out. The two players that were statistical outliers in the abnormally high amount of deaths were Farfetch and Jelly.\nThe mean number of deaths were 2.8, with a standard deviation of 1.1. The upper limit being\n6 deaths and the lower limit being -0.5. Since the lower limit is in the negative, Farfetch and Jelly were over the upper limit at 6 deaths, with 6.4 and 6 average deaths respectively.\nmean = league_data['Avg deaths'].mean()\nstd = league_data['Avg deaths'].std()\nbot = mean - 3 * std\ntop = mean + 3 * std\nprint(\"Mean:\", mean)\nprint(\"Standard Dev:\", std)\nprint(\"Upper Limit:\", top)\nprint(\"Lower Limit:\", bot)\noutliers = league_data[(league_data['Avg deaths'] &lt; bot) | (league_data['Avg deaths'] &gt; top)]\nprint(outliers)"
  }
]